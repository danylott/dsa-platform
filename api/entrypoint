#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

PORT="${APP_PORT:-8000}"
CONFIGURATION="${CONFIGURATION:-local}"

echo "Checking the necessary directories..."
mkdir -p /data/staticfiles


exitFunc() {
  echo 'Exiting...'
  exit -1
}

postgres_ready() {
python << END
import sys
import psycopg2
try:
    psycopg2.connect(
        dbname="${POSTGRES_DB}",
        user="${POSTGRES_USER}",
        password="${POSTGRES_PASSWORD}",
        host="${POSTGRES_HOST}",
        port="${POSTGRES_PORT}",
    )
except psycopg2.OperationalError as e:
    print(e)
    sys.exit(-1)
sys.exit(0)
END
}

wait_for_postgres() {
count=0
trap exitFunc INT
echo "Checking the PostgreSQL connection"
until postgres_ready; do
  count=$((count+1))
  if [ $count -eq 10 ]; then
      >&2 echo 'A waiting time has been reached. Exiting...'
      exit -1
  fi
  >&2 echo 'Waiting for PostgreSQL to become available...'
  sleep 2
done
>&2 echo 'PostgreSQL is available'
}

show_help() {
    echo """
Usage: docker-compose -f <yaml-file> run <service> COMMAND
Commands
production      : Start django using a production ready gunicorn server
local     : Start a local Django development server
shell     : Start a Django Python shell
help      : Show this message
"""
}

run_setup_commands(){
  python manage.py collectstatic --noinput
  python manage.py migrate
}

case "$CONFIGURATION" in
    local)
        wait_for_postgres
        exec python manage.py runserver 0.0.0.0:"${PORT}"
    ;;
    production)
        wait_for_postgres
        run_setup_commands
        exec gunicorn config.wsgi --bind 0.0.0.0:"${PORT}"
    ;;
    shell)
        exec python manage.py shell
    ;;
    *)
        echo "$CONFIGURATION is not a valid configuration"
        show_help
        exit 1
    ;;
esac
